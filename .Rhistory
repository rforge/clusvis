det(Mat)
B <- function(t) matrix(c(1,t,t,t**2), 2, 2)
B
B(1)
B(1/112)
coeffC <- function(beta, t) exp(beta[,1] + beta[,2] * t)
coeffD <- function(t){
allck <- coeffC(beta, t)
allck * (sum(allck)) - allck**2
den <- sum(allck) ** 2
allck / den
}
coeffE <- function(k,h, t){
allck <- coeffC(beta, t)
den <- sum(1+allck) ** 2
-allck[k] * allck[h] /den
}
ComputeM <- function(beta, t){
B <- function(t) matrix(c(1,t,t,t**2), 2, 2)
D <- coeffD(t)
E <- sapply(1:nrow(beta), function(k) sapply(1:nrow(beta), function(h) coeffE(k,h,t)))
rbind(cbind(D[2] * B(t), E[2,3] * B(t)), cbind(E[2,3] * B(t), D[3] * B(t)))
}
beta <- matrix(c(0,0,betaVec), ncol = 2, byrow=TRUE)
res <- lapply((1:111)/112, function(t, beta) ComputeM(beta, t), beta=beta)
Mat <- matrix(0,4,4)
for (k in 1:length(res)) Mat <- Mat + res[[k]]
det(Mat)
coeffC <- function(beta, t) exp(beta[,1] + beta[,2] * t)
coeffD <- function(t){
allck <- coeffC(beta, t)
allck * (sum(allck)) - allck**2
den <- sum(allck) ** 2
allck / den
}
coeffE <- function(k,h, t){
allck <- coeffC(beta, t)
den <- sum(1+allck) ** 2
-allck[k] * allck[h] /den
}
ComputeM <- function(beta, t){
B <- function(t) matrix(c(1,t,t,t**2), 2, 2)
D <- coeffD(t)
E <- sapply(1:nrow(beta), function(k) sapply(1:nrow(beta), function(h) coeffE(k,h,t)))
rbind(cbind(D[2] * B(t), E[2,3] * B(t)), cbind(E[2,3] * B(t), D[3] * B(t)))
}
beta <- matrix(c(0,0,betaVec), ncol = 2, byrow=TRUE)
res <- lapply((1:112)/112, function(t, beta) ComputeM(beta, t), beta=beta)
Mat <- matrix(0,4,4)
for (k in 1:length(res)) Mat <- Mat + res[[k]]
det(Mat)
Mat
coeffC <- function(beta, t) exp(beta[,1] + beta[,2] * t)
coeffD <- function(t){
allck <- coeffC(beta, t)
allck * (sum(allck)) - allck**2
den <- sum(allck) ** 2
allck / den
}
coeffE <- function(k,h, t){
allck <- coeffC(beta, t)
den <- sum(1+allck) ** 2
-allck[k] * allck[h] /den
}
ComputeM <- function(beta, t){
B <- function(t) matrix(c(1,t,t,t**2), 2, 2)
D <- coeffD(t)
E <- sapply(1:nrow(beta), function(k) sapply(1:nrow(beta), function(h) coeffE(k,h,t)))
rbind(cbind(D[2] * B(t), E[2,3] * B(t)), cbind(t(E[2,3] * B(t)), D[3] * B(t)))
}
beta <- matrix(c(0,0,betaVec), ncol = 2, byrow=TRUE)
res <- lapply((1:112)/112, function(t, beta) ComputeM(beta, t), beta=beta)
Mat <- matrix(0,4,4)
for (k in 1:length(res)) Mat <- Mat + res[[k]]
det(Mat)
coeffC <- function(beta, t) exp(beta[,1] + beta[,2] * t)
coeffD <- function(t){
allck <- coeffC(beta, t)
allck * (sum(allck)) - allck**2
den <- sum(allck) ** 2
allck / den
}
coeffE <- function(k,h, t){
allck <- coeffC(beta, t)
den <- sum(1+allck) ** 2
-allck[k] * allck[h] /den
}
ComputeM <- function(beta, t){
B <- function(t) matrix(c(1,t,t,t**2), 2, 2)
D <- coeffD(t)
E <- sapply(1:nrow(beta), function(k) sapply(1:nrow(beta), function(h) coeffE(k,h,t)))
rbind(cbind(D[2] * B(t), E[2,3] * B(t)), cbind(t(E[2,3] * B(t)), D[3] * B(t)))
}
beta <- matrix(c(0,0,betaVec), ncol = 2, byrow=TRUE)
res <- lapply((1:112)/112, function(t, beta) ComputeM(beta, t), beta=beta)
Mat <- matrix(0,4,4)
for (k in 1:length(res)) Mat <- Mat + res[[k]]
det(Mat)
Mat
b
E <- coeff(2,3,t)
coeffC <- function(beta, t) exp(beta[,1] + beta[,2] * t)
coeffD <- function(t){
allck <- coeffC(beta, t)
allck * (sum(allck)) - allck**2
den <- sum(allck) ** 2
allck / den
}
coeffE <- function(k,h, t){
allck <- coeffC(beta, t)
den <- sum(allck) ** 2
-allck[k] * allck[h] /den
}
ComputeM <- function(beta, t){
B <- function(t) matrix(c(1,t,t,t**2), 2, 2)
D <- coeffD(t)
E <- coeffE(2,3,t)
rbind(cbind(D[2] * B(t), E[2,3] * B(t)), cbind(t(E[2,3] * B(t)), D[3] * B(t)))
}
beta <- matrix(c(0,0,betaVec), ncol = 2, byrow=TRUE)
res <- lapply((1:112)/112, function(t, beta) ComputeM(beta, t), beta=beta)
Mat <- matrix(0,4,4)
for (k in 1:length(res)) Mat <- Mat + res[[k]]
det(Mat)
coeffC <- function(beta, t) exp(beta[,1] + beta[,2] * t)
coeffD <- function(t){
allck <- coeffC(beta, t)
allck * (sum(allck)) - allck**2
den <- sum(allck) ** 2
allck / den
}
coeffE <- function(k,h, t){
allck <- coeffC(beta, t)
den <- sum(allck) ** 2
-allck[k] * allck[h] /den
}
ComputeM <- function(beta, t){
B <- function(t) matrix(c(1,t,t,t**2), 2, 2)
D <- coeffD(t)
E <- coeffE(2,3,t)
rbind(cbind(D[2] * B(t), E * B(t)), cbind(E * B(t), D[3] * B(t)))
}
beta <- matrix(c(0,0,betaVec), ncol = 2, byrow=TRUE)
res <- lapply((1:112)/112, function(t, beta) ComputeM(beta, t), beta=beta)
Mat <- matrix(0,4,4)
for (k in 1:length(res)) Mat <- Mat + res[[k]]
det(Mat)
coeffC <- function(beta, t) exp(beta[,1] + beta[,2] * t)
coeffD <- function(t){
allck <- coeffC(beta, t)
allck * (sum(allck)) - allck**2
den <- sum(allck) ** 2
allck / den
}
coeffE <- function(k,h, t){
allck <- coeffC(beta, t)
den <- sum(allck) ** 2
-allck[k] * allck[h] /den
}
ComputeM <- function(beta, t){
B <- function(t) matrix(c(1,t,t,t**2), 2, 2)
D <- coeffD(t)
E <- coeffE(2,3,t)
rbind(cbind(D[2] * B(t), E * B(t)), cbind(E * B(t), D[3] * B(t)))
}
beta <- matrix(c(0,0,betaVec), ncol = 2, byrow=TRUE)
res <- lapply((1:112)/112, function(t, beta) ComputeM(beta, t), beta=beta)
Mat <- matrix(0,4,4)
for (k in 1:length(res)) Mat <- Mat + res[[k]]
det(Mat)
coeffC <- function(beta, t) exp(beta[,1] + beta[,2] * t)
coeffD <- function(t){
allck <- coeffC(beta, t)
allck * (sum(allck)) - allck**2
den <- sum(allck) ** 2
allck / den
}
coeffE <- function(k,h, t){
allck <- coeffC(beta, t)
den <- sum(allck) ** 2
-allck[k] * allck[h] /den
}
ComputeM <- function(beta, t){
B <- function(t) matrix(c(1,t,t,t**2), 2, 2)
D <- coeffD(t)
E <- coeffE(2,3,t)
rbind(cbind(D[2] * B(t), E * B(t)), cbind(E * B(t), D[3] * B(t)))
}
beta <- matrix(c(0,0,betaVec), ncol = 2, byrow=TRUE)
res <- lapply((1:112)/112, function(t, beta) ComputeM(beta, t), beta=beta)
Mat <- matrix(0,4,4)
for (k in 1:length(res)) Mat <- Mat + res[[k]]
det(Mat)
Mat
Mat2 <- matrix(0,4,4)
for (k in 1:length(res)) Mat <- Mat + M[[k]]
det(Mat)
coeffC <- function(beta, t) exp(beta[,1] + beta[,2] * t)
coeffD <- function(t){
allck <- coeffC(beta, t)
allck * (sum(allck)) - allck**2
den <- sum(allck) ** 2
allck / den
}
coeffE <- function(k,h, t){
allck <- coeffC(beta, t)
den <- sum(allck) ** 2
-allck[k] * allck[h] /den
}
ComputeM <- function(beta, t){
B <- function(t) matrix(c(1,t,t,t**2), 2, 2)
D <- coeffD(t)
E <- coeffE(2,3,t)
rbind(cbind(D[2] * B(t), E * B(t)), cbind(E * B(t), D[3] * B(t)))
}
beta <- matrix(c(0,0,betaVec), ncol = 2, byrow=TRUE)
res <- lapply((1:112)/112, function(t, beta) ComputeM(beta, t), beta=beta)
Mat2 <- Mat1 <-  matrix(0,4,4)
for (k in 1:length(res)){
Mat1 <- Mat1 + res[[k]]
Mat2 <- Mat2 + M[[k]]
}
Mat1
Mat2
res[[1]]
M[[1]]
coeffC <- function(beta, t) exp(beta[,1] + beta[,2] * t)
coeffD <- function(t){
allck <- coeffC(beta, t)
allck * (sum(allck)) - allck**2
den <- sum(allck) ** 2
allck / den
}
coeffE <- function(k,h, t){
allck <- coeffC(beta, t)
den <- sum(allck) ** 2
allck[k] * allck[h] /den
}
ComputeM <- function(beta, t){
B <- function(t) matrix(c(1,t,t,t**2), 2, 2)
D <- coeffD(t)
E <- coeffE(2,3,t)
rbind(cbind(D[2] * B(t), E * B(t)), cbind(E * B(t), D[3] * B(t)))
}
beta <- matrix(c(0,0,betaVec), ncol = 2, byrow=TRUE)
res <- lapply((1:112)/112, function(t, beta) ComputeM(beta, t), beta=beta)
Mat2 <- Mat1 <-  matrix(0,4,4)
for (k in 1:length(res)){
Mat1 <- Mat1 + res[[k]]
Mat2 <- Mat2 + M[[k]]
}
Mat1
Mat2
det(Mat1)
coeffC <- function(beta, t) exp(beta[,1] + beta[,2] * t)
coeffD <- function(t){
allck <- coeffC(beta, t)
allck * (sum(allck)) - allck**2
den <- sum(allck) ** 2
allck / den
}
coeffE <- function(k,h, t){
allck <- coeffC(beta, t)
den <- sum(allck) ** 2
-allck[k] * allck[h] /den
}
ComputeM <- function(beta, t){
B <- function(t) matrix(c(1,t,t,t**2), 2, 2)
D <- coeffD(t)
E <- coeffE(2,3,t)
rbind(cbind(D[2] * B(t), E * B(t)), cbind(E * B(t), D[3] * B(t)))
}
beta <- matrix(c(0,0,betaVec), ncol = 2, byrow=TRUE)
res <- lapply((1:112)/112, function(t, beta) ComputeM(beta, t), beta=beta)
Mat2 <- Mat1 <-  matrix(0,4,4)
for (k in 1:length(res)){
Mat1 <- Mat1 + res[[k]]
Mat2 <- Mat2 + M[[k]]
}
Mat1
Mat2
det(Mat1)
coeffC <- function(beta, t) exp(beta[,1] + beta[,2] * t)
coeffD <- function(t){
allck <- coeffC(beta, t)
allck * (sum(allck)) - allck**2
den <- sum(allck) ** 2
allck / den
}
coeffE <- function(k,h, t){
allck <- coeffC(beta, t)
den <- sum(allck) ** 2
-allck[k] * allck[h] /den
}
ComputeM <- function(beta, t){
B <- function(t) matrix(c(1,t,t,t**2), 2, 2)
D <- coeffD(t)
E <- coeffE(2,3,t)
rbind(cbind(D[2] * B(t), E * B(t)), cbind(E * B(t), D[3] * B(t)))
}
beta <- matrix(c(0,0,betaVec), ncol = 2, byrow=TRUE)
res <- lapply((1:112)/112, function(t, beta) ComputeM(beta, t), beta=beta)
Mat2 <- Mat1 <-  matrix(0,4,4)
for (k in 1:length(res)){
M[[k]][3,2] <- M[[k]][2,3] <- M[[k]][1,4]
Mat1 <- Mat1 + res[[k]]
Mat2 <- Mat2 + M[[k]]
}
Mat1
Mat2
det(Mat1)
det(Mat2)
load("/tmp/mozilla_matt0/Matrice_et_beta-3.rda")
det(Mat2)
Mat2 <- Mat1 <-  matrix(0,4,4)
for (k in 1:length(res)){
# M[[k]][3,2] <- M[[k]][2,3] <- M[[k]][1,4]
Mat1 <- Mat1 + res[[k]]
Mat2 <- Mat2 + M[[k]]
}
det(Mat2)
coeffC <- function(beta, t) exp(beta[,1] + beta[,2] * t)
coeffD <- function(t){
allck <- coeffC(beta, t)
allck * (sum(allck)) - allck**2
den <- sum(allck) ** 2
allck / den
}
coeffE <- function(k,h, t){
allck <- coeffC(beta, t)
den <- sum(allck) ** 2
-allck[k] * allck[h] /den
}
ComputeM <- function(beta, t){
B <- function(t) matrix(c(1,t,t,t**2), 2, 2)
D <- coeffD(t)
E <- coeffE(2,3,t)
rbind(cbind(D[2] * B(t), E * B(t)), cbind(E * B(t), D[3] * B(t)))
}
beta <- matrix(c(0,0,betaVec), ncol = 2, byrow=TRUE)
res <- lapply((1:112)/112, function(t, beta) ComputeM(beta, t), beta=beta)
Mat2 <- Mat1 <-  matrix(0,4,4)
for (k in 1:length(res)){
M[[k]][3,2] <- M[[k]][2,3] <- M[[k]][1,4]
Mat1 <- Mat1 + res[[k]]
Mat2 <- Mat2 + M[[k]]
}
Mat1
Mat2
det(Mat1)
det(Mat2)
coeffC <- function(beta, t) exp(beta[,1] + beta[,2] * t)
coeffD <- function(t){
allck <- coeffC(beta, t)
allck * (sum(allck)) + allck**2
den <- sum(allck) ** 2
allck / den
}
coeffE <- function(k,h, t){
allck <- coeffC(beta, t)
den <- sum(allck) ** 2
-allck[k] * allck[h] /den
}
ComputeM <- function(beta, t){
B <- function(t) matrix(c(1,t,t,t**2), 2, 2)
D <- coeffD(t)
E <- coeffE(2,3,t)
rbind(cbind(D[2] * B(t), E * B(t)), cbind(E * B(t), D[3] * B(t)))
}
beta <- matrix(c(0,0,betaVec), ncol = 2, byrow=TRUE)
res <- lapply((1:112)/112, function(t, beta) ComputeM(beta, t), beta=beta)
Mat2 <- Mat1 <-  matrix(0,4,4)
for (k in 1:length(res)){
M[[k]][3,2] <- M[[k]][2,3] <- M[[k]][1,4]
Mat1 <- Mat1 + res[[k]]
Mat2 <- Mat2 + M[[k]]
}
Mat1
Mat2
det(Mat1)
det(Mat2)
coeffC <- function(beta, t) exp(beta[,1] + beta[,2] * t)
coeffD <- function(t){
allck <- coeffC(beta, t)
allck * (sum(allck)) - allck**2
den <- sum(allck) ** 2
allck / den
}
coeffE <- function(k,h, t){
allck <- coeffC(beta, t)
den <- sum(allck) ** 2
-allck[k] * allck[h] /den
}
ComputeM <- function(beta, t){
B <- function(t) matrix(c(1,t,t,t**2), 2, 2)
D <- coeffD(t)
E <- coeffE(2,3,t)
rbind(cbind(D[2] * B(t), E * B(t)), cbind(E * B(t), D[3] * B(t)))
}
beta <- matrix(c(0,0,betaVec), ncol = 2, byrow=TRUE)
res <- lapply((1:112)/112, function(t, beta) ComputeM(beta, t), beta=beta)
Mat2 <- Mat1 <-  matrix(0,4,4)
for (k in 1:length(res)){
M[[k]][3,2] <- M[[k]][2,3] <- M[[k]][1,4]
Mat1 <- Mat1 + res[[k]]
Mat2 <- Mat2 + M[[k]]
}
Mat1
Mat2
det(Mat1)
det(Mat2)
coeffC <- function(beta, t) exp(beta[,1] + beta[,2] * t)
coeffD <- function(t){
allck <- coeffC(beta, t)
allck * (sum(allck)) + allck**2
den <- sum(allck) ** 2
allck / den
}
coeffE <- function(k,h, t){
allck <- coeffC(beta, t)
den <- sum(allck) ** 2
-allck[k] * allck[h] /den
}
ComputeM <- function(beta, t){
B <- function(t) matrix(c(1,t,t,t**2), 2, 2)
D <- coeffD(t)
E <- coeffE(2,3,t)
rbind(cbind(D[2] * B(t), E * B(t)), cbind(E * B(t), D[3] * B(t)))
}
beta <- matrix(c(0,0,betaVec), ncol = 2, byrow=TRUE)
res <- lapply((1:112)/112, function(t, beta) ComputeM(beta, t), beta=beta)
Mat2 <- Mat1 <-  matrix(0,4,4)
for (k in 1:length(res)){
M[[k]][3,2] <- M[[k]][2,3] <- M[[k]][1,4]
Mat1 <- Mat1 + res[[k]]
Mat2 <- Mat2 + M[[k]]
}
Mat1
Mat2
det(Mat1)
det(Mat2)
D(2)
coeffD(1)
coeffD(1/2)
coeffD <- function(t){
allck <- coeffC(beta, t)
allck * (sum(allck)) - allck**2
den <- sum(allck) ** 2
allck / den
}
coeffD(1/2)
coeffC(beta, 1/2)
allck <- coeffC(beta, t)
allck
allck <- coeffC(beta, 1/2)
allck
allck * (sum(allck))
allck**2
allck * (sum(allck)) - allck**2
den <- sum(allck) ** 2
allck / den
allck * (sum(allck)) + allck**2
den <- sum(allck) ** 2
allck / den
coeffC <- function(beta, t) exp(beta[,1] + beta[,2] * t)
coeffD <- function(t){
allck <- coeffC(beta, t)
den <- sum(allck) ** 2
(allck * (sum(allck)) - allck**2)/ den
}
coeffE <- function(k,h, t){
allck <- coeffC(beta, t)
den <- sum(allck) ** 2
-allck[k] * allck[h] /den
}
ComputeM <- function(beta, t){
B <- function(t) matrix(c(1,t,t,t**2), 2, 2)
D <- coeffD(t)
E <- coeffE(2,3,t)
rbind(cbind(D[2] * B(t), E * B(t)), cbind(E * B(t), D[3] * B(t)))
}
beta <- matrix(c(0,0,betaVec), ncol = 2, byrow=TRUE)
res <- lapply((1:112)/112, function(t, beta) ComputeM(beta, t), beta=beta)
Mat2 <- Mat1 <-  matrix(0,4,4)
for (k in 1:length(res)){
M[[k]][3,2] <- M[[k]][2,3] <- M[[k]][1,4]
Mat1 <- Mat1 + res[[k]]
Mat2 <- Mat2 + M[[k]]
}
Mat1
Mat2
det(Mat1)
det(Mat2)
install.packages("RcppArmadillo")
require(mvtnorm)
install.packages("mvtnorm")
install.packages("Rmixmod")
install.packages("mvtnorm")
library(ClusVis)
require(roxygen2)
roxygenize("pkg/")
library(ClusVis)
roxygenize("pkg/")
library(ClusVis)
roxygenize("pkg/")
roxygenize("pkg/")
roxygenize("pkg/")
roxygenize("pkg/")
roxygenize("pkg/")
roxygenize("pkg/")
library(ClusVis)
roxygenize("pkg/")
