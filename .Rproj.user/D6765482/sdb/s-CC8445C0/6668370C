{
    "collab_server" : "",
    "contents" : "rmixmod <- function(resmixmod){\n  x <- NA\n  if (resmixmod@dataType == \"quantitative\"){\n    z <- sample(1:resmixmod@bestResult@nbCluster, 1, prob = resmixmod@bestResult@parameters@proportions)\n    x <- rmvnorm(1, resmixmod@bestResult@parameters@mean[z,], resmixmod@bestResult@parameters@variance[[z]])\n  }else if (resmixmod@dataType == \"qualitative\"){\n    z <- sample(1:resmixmod@bestResult@nbCluster, 1, prob = resmixmod@bestResult@parameters@proportions)\n    x <- sapply(1:ncol(resmixmod@bestResult@parameters@center),\n                function(j, resmixmod, z){\n                  p <- resmixmod@bestResult@parameters@scatter[[z]][j,]\n                  p[resmixmod@bestResult@parameters@center[z,j]] <- 1 -  p[resmixmod@bestResult@parameters@center[z,j]]\n                  sample(1:length(p), 1, prob = p)\n                },\n                resmixmod=resmixmod,\n                z=z)\n  }else if (resmixmod@dataType == \"composite\"){\n    z <- sample(1:resmixmod@bestResult@nbCluster, 1, prob = resmixmod@bestResult@parameters@proportions)\n    xcont <- rmvnorm(1, resmixmod@bestResult@parameters@g_parameter@mean[z,], resmixmod@bestResult@parameters@g_parameter@variance[[z]])\n    xcat <- sapply(1:ncol(resmixmod@bestResult@parameters@m_parameter@center),\n                   function(j, resmixmod, z){\n                     p <- resmixmod@bestResult@parameters@m_parameter@scatter[[z]][j,]\n                     p[resmixmod@bestResult@parameters@m_parameter@center[z,j]] <- 1 -  p[resmixmod@bestResult@parameters@m_parameter@center[z,j]]\n                     sample(1:length(p), 1, prob = p)\n                   },\n                   resmixmod=resmixmod,\n                   z=z)\n    x <- list(xcont=xcont, xcat=xcat)\n  }else{\n    stop(\"type non programe\")\n  }\n  x\n}\n\ndlogsinglequalimixmod <- function(x, j, resmixmod, z){\n  p <- resmixmod@bestResult@parameters@scatter[[z]][j,]\n  p[resmixmod@bestResult@parameters@center[z,j]] <- 1 -  p[resmixmod@bestResult@parameters@center[z,j]]\n  log(p[x])\n}\n\ndlogsinglequalimixmodcompo <- function(x, j, resmixmod, z){\n  p <- resmixmod@bestResult@parameters@m_parameter@scatter[[z]][j,]\n  p[resmixmod@bestResult@parameters@m_parameter@center[z,j]] <- 1 -  p[resmixmod@bestResult@parameters@m_parameter@center[z,j]]\n  log(p[x])\n}\n\ndlogtik <- function(x, resmixmod){\n  dlog <- NA\n  if (resmixmod@dataType == \"quantitative\"){\n    dlog <-  sapply(1:resmixmod@bestResult@nbCluster,\n                    function(z, x, resmixmod)\n                      dmvnorm(x, resmixmod@bestResult@parameters@mean[z,], resmixmod@bestResult@parameters@variance[[z]], log=TRUE) + log(resmixmod@bestResult@parameters@proportions[z]),\n                    x=x,\n                    resmixmod=resmixmod)\n  }else if (resmixmod@dataType == \"qualitative\"){\n    dlog <- rowSums(sapply(1:length(x),\n                           function(j, resmixmod, x)\n                             sapply(1:resmixmod@bestResult@nbCluster, dlogsinglequalimixmod, x=x[j], j=j, resmixmod=resmixmod),\n                           resmixmod=resmixmod,\n                           x=x)) + log(resmixmod@bestResult@parameters@proportions)\n  }else if (resmixmod@dataType == \"composite\"){\n    dlog <- log(resmixmod@bestResult@parameters@proportions) +\n      sapply(1:resmixmod@bestResult@nbCluster,\n             function(z, x, resmixmod)\n               dmvnorm(x, resmixmod@bestResult@parameters@g_parameter@mean[z,], resmixmod@bestResult@parameters@g_parameter@variance[[z]], log=TRUE),\n             x=x$xcont,\n             resmixmod=resmixmod) +\n      rowSums(sapply(1:length(x$xcat),\n                     function(j, resmixmod, x)\n                       sapply(1:resmixmod@bestResult@nbCluster, dlogsinglequalimixmodcompo, x=x[j], j=j, resmixmod=resmixmod),\n                     resmixmod=resmixmod,\n                     x=x$xcat))\n  }else{\n    stop(\"this type of variable is not implemented\")\n  }\n  dlog <- dlog - max(dlog)\n  dlog <- dlog - log(sum(exp(dlog)))\n  return(dlog)\n}\n\nrlogtikmixmod <- function(resmixmod){\n  x <- rmixmod(resmixmod)\n  dlogtik(x, resmixmod)\n}\n\n\n\n###################################################################################\n##' This function estimates the parameters used for visualization of model-based clustering performs with R package Rmixmod. To achieve the parameter infernece, it automatically samples probabilities of classification from the model parameters\n##'\n##'\n##' @param mixmodResult [\\code{\\linkS4class{MixmodCluster}}] It is an instance of class MixmodCluster returned by function mixmodCluster of R package Rmixmod.\n##' @param sample.size numeric. Number of probabilities of classification sampled for parameter inference.\n##' @param maxit numeric. It limits the number of iterations for the Quasi-Newton algorithm (default 1000)!!!!!!\n##' @param nbrandomInit numeric. It defines the number of random initialization of the Quasi-Newton algorithm.\n##' @param nbcpu numeric. It specifies the number of CPU (only for linux).\n##' @param loccont numeric. Index of the column containing continuous variables (only for mixed-type data).\n##'\n##' @return Returns a list\n##' @examples\n##' # Package loading\n##' require(Rmixmod)\n##' \n##' # Data loading (categorical data)\n##' data(birds)\n##'\n##' # Model-based clustering with 3 components\n##' resmixmod <- mixmodCluster(birds, 3)\n##'\n##' # Inference of the parameters used for results visualization\n##' # (specific for Rmixmod results)\n##' resvisu <- clusvisMixmod(resmixmod)\n##'\n##' # Component interpretation graph\n##' plotDensityClusVisu(resvisu)\n##'\n##' # Scatter-plot of the observation memberships\n##' plotDensityClusVisu(resvisu,  add.obs = TRUE)\n##' @export\n##'\n##'\nclusvisMixmod <- function(mixmodResult, sample.size=5000, maxit=10**3, nbrandomInit=4*mixmodResult@bestResult@nbCluster, nbcpu=3, loccont=NULL){\n  if (mixmodResult@dataType != \"composite\"){\n    tmp <- t(apply(mixmodResult@data, 1, dlogtik, resmixmod=mixmodResult))\n  }else{\n    loccat <- (1:ncol(mixmodResult@data))[-loccont]\n    tmp <- t(sapply(1:nrow(mixmodResult@data), function(i) dlogtik(list(xcont=mixmodResult@data[i,loccont], xcat=mixmodResult@data[i,loccat]), mixmodResult)))\n  }\n  if (sample.size>0){\n    logtik.estim <-  t(replicate(sample.size, rlogtikmixmod(mixmodResult)))\n  }else{\n    logtik.estim <- tmp\n  }\n\n\n  out <- clusvis(logtik.estim, prop=mixmodResult@bestResult@parameters@proportions, logtik.obs=tmp, maxit, nbrandomInit, nbcpu)\n  out$EM <- sum(exp(logtik.estim) * logtik.estim) / (log(length(mixmodResult@bestResult@parameters@proportions)) * sample.size)\n\n  return(out)\n}\n",
    "created" : 1498227840308.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2518356508",
    "id" : "6668370C",
    "lastKnownWriteTime" : 1498229233,
    "last_content_update" : 1498229233224,
    "path" : "~/Documents/recherche/visualisation/clusvis/pkg/R/clusvismixmod.R",
    "project_path" : "pkg/R/clusvismixmod.R",
    "properties" : {
    },
    "relative_order" : 8,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}