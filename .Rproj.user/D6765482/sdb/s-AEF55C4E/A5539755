{
    "collab_server" : "",
    "contents" : "convertmuVecToMat <- function(muvec, dim){\n  mumat <- matrix(0, dim, dim)\n  mumat[lower.tri(mumat, diag=TRUE)] <- muvec\n  mumat <- rbind(mumat, rep(0, dim))\n  mumat\n}\n\nphiinvall <- function(logu, mu){\n  Minv <- ginv(mu[-nrow(mu),])\n  sweep(logu %*% t(Minv), 2, 0.5 * (Minv %*% rowSums(mu**2)[-nrow(mu)]), \"+\")\n}\n# \n# probatz <- function(y, mu, prop)\n#   rowSums(sapply(as.list(1:ncol(y)),\n#                  function(h, y, mu) dnorm(y[,h], mu[h], log=TRUE),\n#                  y=y,\n#                  mu=mu)) + log(prop)\n# \n# \n# \n# gradphiinvhh <- function(yi, mumatupref, h)\n#   c((mumatupref[h,1:h] - yi[1:h])/mumatupref[h,h], rep(0, length(yi) - h))\n# \n# computegradPhiInv <- function(yi, mumatupref){\n#   listgradphiinvhkl <- list()\n#   dim <- ncol(mumatupref)\n#   for (h in 1:dim){\n#     listgradphiinvhkl[[h]] <- matrix(0, dim+1, dim)\n#     listgradphiinvhkl[[h]][h,] <- gradphiinvhh(yi, mumatupref, h)\n#     if (h>1)\n#       listgradphiinvhkl[[h]] <- listgradphiinvhkl[[h]] -  matrix(rowSums(sapply(1:(h-1), function(hp) as.numeric(listgradphiinvhkl[[hp]] * mumatupref[h, hp]) )), dim+1, dim)/mumatupref[h,h]\n# \n#   }\n#   listgradphiinvhkl\n# }\n# \n# gradl1ind <- function(w, yi, mumatupref){\n#   K <- ncol(mumatupref) + 1\n#   gradphiinv <- computegradPhiInv(yi, mumatupref)\n#   tmp <- sweep(mumatupref, 2, yi, \"-\")\n#   delta <- sweep(tmp, 1, w, \"*\")\n#   sumdelta <- colSums(delta)\n#   delta[upper.tri(delta)] <- 0\n#   out <- matrix(rowSums(sapply(1:(K-1), function(h) as.numeric(gradphiinv[[h]] * sumdelta[h]))), K, K-1) - delta\n#   out[1:length(yi), ,drop=FALSE]\n# }\n# \n# \n# computeGradient <- function(muvec, prop, logu, tik){\n#   n <- nrow(logu)\n#   mumat <- convertmuVecToMat(muvec, ncol(logu))\n#   y <- phiinvall(logu, mumat)\n#   grr <-  - diag( n * sign(diag(mumat)) /diag(mumat))\n#   for (i in 1:n)  grr <- grr + gradl1ind(tik[i,], y[i,], mumat)\n#   grr[lower.tri(grr, diag=TRUE)]\n# }\n# \n# completelikelihood <- function(muvec, prop, logu, tik){\n#   mu <- convertmuVecToMat(muvec, ncol(logu))\n#   y <- phiinvall(logu, mu)\n#   loglikecomplete <- rowSums(sapply(as.list(1:ncol(tik)),\n#                                     function(k, y, mu, prop) probatz(y, mu[k,], prop[k]),\n#                                     y=y,\n#                                     mu=mu,\n#                                     prop=prop) * tik)\n#   logjacobian <- -  sum(log(abs(diag(mu)))) - rowSums(logu)\n#   sum(loglikecomplete + logjacobian)\n# }\n# \n# \n# completelikelihoodCPP <- function(Rparam, Rprop, Rlogu, Rtik)\n#   completelikelihood(Rparam, Rprop, Rlogu, Rtik)\n\ndmixtmvnorm <- function(x, y, mu, prop)\n  dnorm(x, mu[1]) * dnorm(y, mu[2]) * prop\n\n",
    "created" : 1498477111361.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1515554062",
    "id" : "A5539755",
    "lastKnownWriteTime" : 1498477539,
    "last_content_update" : 1498477539365,
    "path" : "~/Documents/recherche/visualisation/clusvis/pkg/R/estimation.R",
    "project_path" : "pkg/R/estimation.R",
    "properties" : {
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}